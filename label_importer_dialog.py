# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DataDefinedLabelImporterDialog
                                 A QGIS plugin
 Helps you to import Labeldata, stored in an auxiliary Layer from another Project.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Tobias
        email                : heitob903@outlook.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsProject
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
#from qgis.utils import iface
from label_importer.gui.layers_to_copy_widget import LayerToCopyWidget

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'label_importer_dialog_base.ui'))


class DataDefinedLabelImporterDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DataDefinedLabelImporterDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.LayerToCopyWidget = LayerToCopyWidget()
        #self.iface = iface
        self.setupUi(self)
        self.setup_gui()



    def setup_gui(self):
        def set_up_combo_box(file_path):
            project = QgsProject()
            project.read(file_path)
            layers = project.mapLayers().values()
            for layer in layers:
                self.LayerToCopyWidget.comboBox.addItem(layer.name())
            pass
        
        self.advancedOptionsGroupBox.layout().addWidget(self.LayerToCopyWidget)
        self.projectFile.fileChanged.connect(lambda file_path: set_up_combo_box(file_path))
        #self.advancedOptionsGroupBox.layout().addWidget(self.dirsToCopyWidget)
